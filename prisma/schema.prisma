generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Usuario {
  id              Int       @id @default(autoincrement())
  nombre          String
  email           String    @unique
  apellidos       String
  salt            String    @db.Text
  hashedPassword  String    @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt 
  rolId           Int
  rol             Roles     @relation(fields: [rolId], references: [id]) 
}

model Roles {
  id         Int        @id @default(autoincrement())
  nombre     String
  usuarios   Usuario[]  
}

model Carrera {
  id         Int       @id @default(autoincrement())
  nombre     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt 

  grupos     Grupo[] 
}

model Grupo {
  id             Int       @id @default(autoincrement())
  nombre_grupo   String
  periodo        String
  carreraId      Int
  profesorId     Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt 

  carrera        Carrera    @relation(fields: [carreraId], references: [id])
  profesor       Profesor   @relation(fields: [profesorId], references: [id])
  alumnos        AlumnoGrupo[] // Relación muchos a muchos con Alumno
}

model Alumno {
  id              Int        @id @default(autoincrement())
  nombre          String
  correo          String     @unique
  telefono        String
  curp            String     @unique
  numero_empleado String      @unique
  tipo_contrato   String      // Base o Por honorarios
  fecha_ingreso   DateTime
  estatus         String      // Activo o Inactivo
  area            String

  grupos          AlumnoGrupo[] // Relación muchos a muchos con Grupo
}

model Profesor {
  id              Int        @id @default(autoincrement())
  nombre          String
  correo          String     @unique
  telefono        String
  numero_empleado String      @unique @db.VarChar(12)
  tipo_contrato   String      // Base o Por honorarios
  fecha_ingreso   DateTime
  estatus         String      // Activo o Inactivo
  area            String

  grupos          Grupo[] // Relación uno a muchos con Grupo
}

// Relación muchos a muchos entre Alumno y Grupo
model AlumnoGrupo {
  id         Int   @id @default(autoincrement())
  alumnoId   Int
  grupoId    Int

  alumno     Alumno @relation(fields: [alumnoId], references: [id])
  grupo      Grupo  @relation(fields: [grupoId], references: [id])

  @@unique([alumnoId, grupoId]) // Evitar duplicados en la relación
}